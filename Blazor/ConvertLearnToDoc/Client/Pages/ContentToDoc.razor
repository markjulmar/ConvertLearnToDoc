@page "/"

@using Microsoft.AspNetCore.Components
@using ConvertLearnToDoc.Shared
@using System.Text.Json
@using System.Text
@using System.Net.Mime

@inject HttpClient HttpClient
@inject IJSRuntime JS

<PageTitle>Learn to Word</PageTitle>
<HeadContent>
    <meta name="description" content="Convert Microsoft Learn articles or training modules into Word documents."/>
    <meta name="author" content="markjulmar" />
</HeadContent>

<h3>Convert a Learn article or training module into a Word document</h3>

@if (!string.IsNullOrEmpty(errorText))
{
    <div class="alert alert-danger">
        <a href="#" class="close" data-dismiss="alert">&times;</a>
        <strong>Error: </strong> @errorText
    </div>
}

<p>
    Enter the GitHub details for the page or training module to convert to Word. 
    You can also enter a URL from the <a href="https://learn.microsoft.com">Learn site</a> and use the <b>Get Repo Info</b> to populate the GitHub information directly from the URL.
</p>

<ProgressDialog @ref="progressDialog" />

<EditForm id="convertForm" EditContext="@editContext" OnValidSubmit="@HandleSubmit" class="row g-3">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-md-4">
        <label for="gitHubOrg">Organization</label>
        <InputText @bind-Value="input.Organization" class="form-control" id="gitHubOrg" placeholder="MicrosoftDocs" list="orgListOptions" />
        <ValidationMessage For="() => input.Organization"/>
        <datalist id="orgListOptions">
            <option value="MicrosoftDocs" />
            <option value="Azure" />
            <option value="DotNet" />
            <option value="Microsoft" />
            <option value="Xamarin" />
        </datalist>
    </div>
    <div class="col-md-4">
        <label for="githubRepo">Repository</label>
        <InputText @bind-Value="input.Repository" class="form-control" id="githubRepo" />
        <ValidationMessage For="() => input.Repository" />
    </div>
    <div class="col-md-4">
        <label for="githubBranch">Branch</label>
        <InputText @bind-Value="input.Branch" class="form-control" id="githubBranch" placeholder="live" />
        <ValidationMessage For="() => input.Branch" />
    </div>

    <div class="col-12">
        <label for="githubFolder">Module folder or path to conceptual Markdown page</label>
        <InputText @bind-Value="input.Folder" class="form-control" id="githubFolder" aria-describedby="folderHelp" />
        <ValidationMessage For="() => input.Folder" />
        <small id="folderHelp" class="form-text text-muted">ex: learn-pr/wwl-azure/configure-storage-accounts <em>or</em> articles/aks/aks-migration.md</small>
    </div>
    
    <div class="col-md-6 pb-4">
        <label for="zonePivot">Zone Pivot (leave blank to render all pivots)</label>
        <InputText @bind-Value="input.ZonePivot" class="form-control" id="zonePivot" 
                   DisplayName="Zone Pivot" />
    </div>
    
    <div class="col-md-6 row">
        <div class="d-flex align-items-center">
            <div>
                <InputCheckbox @bind-Value="input.EmbedNotebooks" class="form-check-input" id="EmbedNotebookData"/>
                <label class="form-check-label" for="EmbedNotebookData">
                    Embed any associated Jupyter Notebook
                </label>
            </div>
        </div>
    </div>
    
    <div class="col">
        <button type="submit" disabled="@(input.IsValid()==false)" class="btn btn-success">Convert</button>
    </div>

</EditForm>

<hr />

<div class="row">
    <div class="input-group mb-3">
        <input id="url" @bind="Url" @bind:event="oninput" class="form-control"
               placeholder="https://learn.microsoft.com/en-us/training/modules/configure-storage-accounts/" />
        <div class="input-group-append">
            <button class="btn btn-primary" type="button" disabled="@string.IsNullOrWhiteSpace(Url)" @onclick="GetRepoInfoAsync">Get Repo Info</button>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(urlError))
    {
        <div class="text-danger">
            <p>@urlError</p>
        </div>
    }

</div>

@code {
    private string? errorText;
    private string? urlError;
    private string? Url { get; set; }
    private ContentRef input = new ();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private ProgressDialog? progressDialog;

    protected override void OnInitialized()
    {
        editContext = new(input);
        messageStore = new(editContext);
        base.OnInitialized();
    }

    private async Task GetRepoInfoAsync()
    {
        messageStore?.Clear();
        urlError = null;

        if (!string.IsNullOrWhiteSpace(Url))
        {
            if (!Url.ToLower().StartsWith("http")
                || !Uri.IsWellFormedUriString(Url, UriKind.Absolute))
            {
                urlError = "Please enter a valid URL to a training module or conceptual article.";
            }
            else
            {
                var urlDetails = await HttpClient.GetFromJsonAsync<ContentRef>($"api/ContentConverter?url={Url}");
                if (urlDetails?.IsValid() == true)
                {
                    input.Organization = urlDetails.Organization;
                    editContext!.NotifyFieldChanged(editContext!.Field(nameof(input.Organization)));

                    input.Repository = urlDetails.Repository;
                    editContext!.NotifyFieldChanged(editContext!.Field(nameof(input.Repository)));

                    input.Folder = urlDetails.Folder;
                    editContext!.NotifyFieldChanged(editContext!.Field(nameof(input.Folder)));
                    
                    input.Branch = urlDetails.Branch;
                    editContext!.NotifyFieldChanged(editContext!.Field(nameof(input.Branch)));

                    //editContext?.Validate();
                }
                else
                {
                    urlError = "URL doesn't point to an article or training module on the public site. Please specify the full GitHub details instead.";
                }
            }
        }
    }

    private async Task HandleSubmit()
    {
        errorText = null;
        urlError = null;

        progressDialog?.Show();

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/ContentConverter", input);
            if (response.IsSuccessStatusCode)
            {
                string filename = FileHelpers.GetFilenameFromResponse(response, "output.docx");
                await FileHelpers.DownloadFileFromResponseAsync(response, JS, filename);
                Url = null;
            }
            else
            {
                errorText = response.ReasonPhrase;
            }
        }
        finally
        {
            progressDialog?.Hide();
        }
    }
}

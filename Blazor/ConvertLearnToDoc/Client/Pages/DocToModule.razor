@page "/docToModule"

@using ConvertLearnToDoc.Shared
@using Constants = ConvertLearnToDoc.Shared.Constants

@inject HttpClient HttpClient
@inject IJSRuntime JS

<PageTitle>Word to Learn Module</PageTitle>
<HeadContent>
    <meta name="description" content="Convert Word documents into a Microsoft Learn Module." />
    <meta name="author" content="markjulmar" />
</HeadContent>

<h3>Convert a Word document into a Learn training module</h3>

<AlertBox ErrorText="@errorText" />

<p>
    Upload the Word document to convert. The module will be returned as a .zip file with Markdown, metadata, and images.
</p>

@if (editMetadata)
{
    <ModuleMetadata @bind-Metadata="metadata" @bind-IsShowing="editMetadata" Title="Learn Module Metadata" />
}

<EditForm class="row g-3" id="convertArticle" Model="@input" OnSubmit="HandleSubmit">
    <DocumentInput @bind-SelectedFile="SelectedFile" />
    
    <div class="col-12">
        <button class="btn btn-secondary" type="button" disabled="@(SelectedFile == null)" @onclick="GetMetadataFromDocument">Edit Metadata</button>
    </div>

    <label><b>Markdown options</b></label>
    <div class="col-6">
        <div class="form-check">
            <InputCheckbox @bind-Value="input.UseGenericIds" class="form-check-input" id="useGenericIds" />
            <label class="form-check-label" for="useGenericIds">
                Use generic names and identifiers instead of document headers
            </label>
        </div>
    </div>
    <div class="col-6">
        <div class="form-check">
            <InputCheckbox @bind-Value="input.IgnoreMetadata" class="form-check-input" id="ignoreMetadata" />
            <label class="form-check-label" for="ignoreMetadata">
                Ignore any module metadata - select if you are creating a new module from an existing document
            </label>
        </div>
    </div>

    <MarkdownOptions Options="@input" />

    <div class="col">
        <button type="submit" disabled="@(SelectedFile == null)" class="btn btn-success">Convert</button>
    </div>
</EditForm>

<div class="pl-3 pt-3">
    <div class="card mt-4">
        <h5 class="card-header">Document templates</h5>
        <div class="card-body">
            <p>
                You can use the following training module templates to get started. Download one of the following Word documents and fill it in with the proper details and then upload it to this page to get a Learn training module.
            </p>
            <p>
                <ul>
                    @foreach (var template in templates)
                    {
                        <li>
                            <a href="resources/training/@(template.filename).docx" download>@template.name</a> - @template.description
                        </li>
                    }
                </ul>
            </p>
        </div>
    </div>
    
    <div class="card mt-4">
        <h5 class="card-header">Document Tips</h5>
        <div class="card-body">
            <ul>
                <li>Use the <b>Heading1</b> style to start a new unit.</li>
                <li>Set the document metadata - <code>Title</code>, <code>Author</code>, and <code>Save Date</code> - these will be used to fill in metadata.</li>
                <li>You can set the <code>Categories</code> to the module UID. The tool will use that module's metadata from the live content to fill in the blanks, if it doesn't exist then this will be considered a new module. <b>Important:</b> If you are using a document created from an <em>existing</em> module to generate a <em>new</em> module, then make sure to set <code>Categories</code> to a new value so the generated Learn module won't have the original module's metadata applied to it.</li>
                <li>Keep text simple - Markdown only supports <b>Bold</b>, <i>Italic</i>, and <span style="font-family: MONOSPACE;">Monospaced fonts for code</span>.</li>
                <li>Tables, links, lists, images, and videos are all supported.</li>
                <li>Embed a placeholder video from YouTube if you don't know the link and then replace the Markdown link before publishing.</li>
                <li>For images, make sure to set Alt Text. In addition, you can add a caption to the image to add screen-reader descriptions.</li>
            </ul>
        </div>
    </div>
</div>

@code
{
    private List<(string name,string description,string filename)> templates = new()
    {
        ("Standard module","A standard-task-based is a Learn module pattern that teaches a real-world job-task. It includes a sequence of concept units mixed with exercises and knowledge checks.","standard-task-based-module-pattern-template"),
        ("Introduction module","An introduction-to-product is a Learn module pattern that helps customers evaluate whether the product will meet their needs.","introduction-to-product-module-pattern-template"),
        ("Choose module", "Choose-the-best-to-product is a Learn module pattern that helps customers select the best product for their needs from a group of product that offer similar functionality. These modules guide customers at the start of their projects, which means they can have a large effect on the success of those projects.", "choose-the-best-product-module-pattern-template"),
        ("Build your first module", "Build-your-first is a Learn module pattern that teaches how to use a product. These modules give our customers a quick way to try a product as we guide them through their first use.", "build-your-first-module-pattern-template"),
        ("Challenge project module", "Challenge project is a Learn module pattern that encourages the learner to solve a real-world problem with only a specification to guide them. These modules are analogous to homework exercises in academic environments.", "challenge-project-module-pattern-template"),
    };

    private string? errorText;
    private readonly ModuleRef input = new();
    private IBrowserFile? selectedFile;

    private IBrowserFile? SelectedFile
    {
        get => selectedFile;
        set
        {
            if (selectedFile != value)
            {
                selectedFile = value;
                metadata = null;
            }
        }
    }
    private string? metadata;
    private bool editMetadata;

    private async Task GetMetadataFromDocument()
    {
        if (metadata == null)
        {
            if (SelectedFile is not { ContentType: Constants.WordMimeType } || SelectedFile.Size < 100)
            {
                errorText = "Selected file is not a Word document. " + SelectedFile?.ContentType;
                return;
            }

            var document = await BrowserFile.CreateAsync(SelectedFile);

            var response = await HttpClient.PostAsJsonAsync("/api/DocConverter/metadata", document);
            if (response.IsSuccessStatusCode)
            {
                metadata = await response.Content.ReadAsStringAsync();
            }
            else
            {
                errorText = response.ReasonPhrase;
            }
        }

        editMetadata = true;
    }

    private async Task HandleSubmit()
    {
        if (SelectedFile is not { ContentType: Constants.WordMimeType } || SelectedFile.Size < 100)
        {
            errorText = "Selected file is not a Word document. " + SelectedFile?.ContentType;
            return;
        }

        input.Document = await BrowserFile.CreateAsync(SelectedFile);
        input.Metadata = metadata;

        await JS.InvokeVoidAsync("showWorkingDialog");
        HttpResponseMessage response;

        try
        {
            response = await HttpClient.PostAsJsonAsync("/api/DocConverter/module", input);
        }
        finally
        {
            await JS.InvokeVoidAsync("hideWorkingDialog");
        }

        if (response.IsSuccessStatusCode)
        {
            var filename = FileHelpers.GetFilenameFromResponse(response, "output.zip");
            await FileHelpers.DownloadFileFromResponseAsync(response, JS, filename);
        }
        else
        {
            errorText = response.ReasonPhrase;
        }
    }
}
